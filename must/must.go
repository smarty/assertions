package must

import "github.com/smarty/assertions"

func fatal(so assertions.SoFunc) assertions.SoFunc {
	return func(actual any, expected ...any) string {
		result := so(actual, expected...)
		if len(result) > 0 {
			return "<<FATAL>>" + result
		}
		return result
	}
}

var (
	AlmostEqual            = fatal(assertions.ShouldAlmostEqual)
	BeBetween              = fatal(assertions.ShouldBeBetween)
	BeBetweenOrEqual       = fatal(assertions.ShouldBeBetweenOrEqual)
	BeBlank                = fatal(assertions.ShouldBeBlank)
	BeChronological        = fatal(assertions.ShouldBeChronological)
	BeEmpty                = fatal(assertions.ShouldBeEmpty)
	BeError                = fatal(assertions.ShouldBeError)
	BeFalse                = fatal(assertions.ShouldBeFalse)
	BeGreaterThan          = fatal(assertions.ShouldBeGreaterThan)
	BeGreaterThanOrEqualTo = fatal(assertions.ShouldBeGreaterThanOrEqualTo)
	BeIn                   = fatal(assertions.ShouldBeIn)
	BeLessThan             = fatal(assertions.ShouldBeLessThan)
	BeLessThanOrEqualTo    = fatal(assertions.ShouldBeLessThanOrEqualTo)
	BeNil                  = fatal(assertions.ShouldBeNil)
	BeTrue                 = fatal(assertions.ShouldBeTrue)
	BeZeroValue            = fatal(assertions.ShouldBeZeroValue)
	Contain                = fatal(assertions.ShouldContain)
	ContainKey             = fatal(assertions.ShouldContainKey)
	ContainSubstring       = fatal(assertions.ShouldContainSubstring)
	EndWith                = fatal(assertions.ShouldEndWith)
	Equal                  = fatal(assertions.ShouldEqual)
	EqualJSON              = fatal(assertions.ShouldEqualJSON)
	EqualTrimSpace         = fatal(assertions.ShouldEqualTrimSpace)
	EqualWithout           = fatal(assertions.ShouldEqualWithout)
	HappenAfter            = fatal(assertions.ShouldHappenAfter)
	HappenBefore           = fatal(assertions.ShouldHappenBefore)
	HappenBetween          = fatal(assertions.ShouldHappenBetween)
	HappenOnOrAfter        = fatal(assertions.ShouldHappenOnOrAfter)
	HappenOnOrBefore       = fatal(assertions.ShouldHappenOnOrBefore)
	HappenOnOrBetween      = fatal(assertions.ShouldHappenOnOrBetween)
	HappenWithin           = fatal(assertions.ShouldHappenWithin)
	HaveLength             = fatal(assertions.ShouldHaveLength)
	HaveSameTypeAs         = fatal(assertions.ShouldHaveSameTypeAs)
	Implement              = fatal(assertions.ShouldImplement)
	NotAlmostEqual         = fatal(assertions.ShouldNotAlmostEqual)
	NotBeBetween           = fatal(assertions.ShouldNotBeBetween)
	NotBeBetweenOrEqual    = fatal(assertions.ShouldNotBeBetweenOrEqual)
	NotBeBlank             = fatal(assertions.ShouldNotBeBlank)
	NotBeChronological     = fatal(assertions.ShouldNotBeChronological)
	NotBeEmpty             = fatal(assertions.ShouldNotBeEmpty)
	NotBeIn                = fatal(assertions.ShouldNotBeIn)
	NotBeNil               = fatal(assertions.ShouldNotBeNil)
	NotBeZeroValue         = fatal(assertions.ShouldNotBeZeroValue)
	NotContain             = fatal(assertions.ShouldNotContain)
	NotContainKey          = fatal(assertions.ShouldNotContainKey)
	NotContainSubstring    = fatal(assertions.ShouldNotContainSubstring)
	NotEndWith             = fatal(assertions.ShouldNotEndWith)
	NotEqual               = fatal(assertions.ShouldNotEqual)
	NotHappenOnOrBetween   = fatal(assertions.ShouldNotHappenOnOrBetween)
	NotHappenWithin        = fatal(assertions.ShouldNotHappenWithin)
	NotHaveSameTypeAs      = fatal(assertions.ShouldNotHaveSameTypeAs)
	NotImplement           = fatal(assertions.ShouldNotImplement)
	NotPanic               = fatal(assertions.ShouldNotPanic)
	NotPanicWith           = fatal(assertions.ShouldNotPanicWith)
	NotPointTo             = fatal(assertions.ShouldNotPointTo)
	NotResemble            = fatal(assertions.ShouldNotResemble)
	NotStartWith           = fatal(assertions.ShouldNotStartWith)
	Panic                  = fatal(assertions.ShouldPanic)
	PanicWith              = fatal(assertions.ShouldPanicWith)
	PointTo                = fatal(assertions.ShouldPointTo)
	Resemble               = fatal(assertions.ShouldResemble)
	StartWith              = fatal(assertions.ShouldStartWith)
	Wrap                   = fatal(assertions.ShouldWrap)
)
